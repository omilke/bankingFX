/*
 * This file is generated by jOOQ.
 */
package de.omilke.banking.persistence.jooq.meta.tables.records


import de.omilke.banking.persistence.jooq.meta.tables.Entry

import java.math.BigDecimal
import java.time.LocalDate

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EntryRecord() : UpdatableRecordImpl<EntryRecord>(Entry.ENTRY), Record11<Long?, BigDecimal?, LocalDate?, String?, String?, Boolean?, Int?, Int?, Int?, Int?, Int?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var amount: BigDecimal?
        set(value) = set(1, value)
        get() = get(1) as BigDecimal?

    var entrydate: LocalDate?
        set(value) = set(2, value)
        get() = get(2) as LocalDate?

    var comment: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var category: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var saving: Boolean?
        set(value) = set(5, value)
        get() = get(5) as Boolean?

    var sequence: Int?
        set(value) = set(6, value)
        get() = get(6) as Int?

    var orderindex: Int?
        set(value) = set(7, value)
        get() = get(7) as Int?

    var year: Int?
        set(value) = set(8, value)
        get() = get(8) as Int?

    var month: Int?
        set(value) = set(9, value)
        get() = get(9) as Int?

    var day: Int?
        set(value) = set(10, value)
        get() = get(10) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row11<Long?, BigDecimal?, LocalDate?, String?, String?, Boolean?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row11<Long?, BigDecimal?, LocalDate?, String?, String?, Boolean?, Int?, Int?, Int?, Int?, Int?>
    override fun valuesRow(): Row11<Long?, BigDecimal?, LocalDate?, String?, String?, Boolean?, Int?, Int?, Int?, Int?, Int?> = super.valuesRow() as Row11<Long?, BigDecimal?, LocalDate?, String?, String?, Boolean?, Int?, Int?, Int?, Int?, Int?>
    override fun field1(): Field<Long?> = Entry.ENTRY.ID
    override fun field2(): Field<BigDecimal?> = Entry.ENTRY.AMOUNT
    override fun field3(): Field<LocalDate?> = Entry.ENTRY.ENTRYDATE
    override fun field4(): Field<String?> = Entry.ENTRY.COMMENT
    override fun field5(): Field<String?> = Entry.ENTRY.CATEGORY
    override fun field6(): Field<Boolean?> = Entry.ENTRY.SAVING
    override fun field7(): Field<Int?> = Entry.ENTRY.SEQUENCE
    override fun field8(): Field<Int?> = Entry.ENTRY.ORDERINDEX
    override fun field9(): Field<Int?> = Entry.ENTRY.YEAR
    override fun field10(): Field<Int?> = Entry.ENTRY.MONTH
    override fun field11(): Field<Int?> = Entry.ENTRY.DAY
    override fun component1(): Long? = id
    override fun component2(): BigDecimal? = amount
    override fun component3(): LocalDate? = entrydate
    override fun component4(): String? = comment
    override fun component5(): String? = category
    override fun component6(): Boolean? = saving
    override fun component7(): Int? = sequence
    override fun component8(): Int? = orderindex
    override fun component9(): Int? = year
    override fun component10(): Int? = month
    override fun component11(): Int? = day
    override fun value1(): Long? = id
    override fun value2(): BigDecimal? = amount
    override fun value3(): LocalDate? = entrydate
    override fun value4(): String? = comment
    override fun value5(): String? = category
    override fun value6(): Boolean? = saving
    override fun value7(): Int? = sequence
    override fun value8(): Int? = orderindex
    override fun value9(): Int? = year
    override fun value10(): Int? = month
    override fun value11(): Int? = day

    override fun value1(value: Long?): EntryRecord {
        this.id = value
        return this
    }

    override fun value2(value: BigDecimal?): EntryRecord {
        this.amount = value
        return this
    }

    override fun value3(value: LocalDate?): EntryRecord {
        this.entrydate = value
        return this
    }

    override fun value4(value: String?): EntryRecord {
        this.comment = value
        return this
    }

    override fun value5(value: String?): EntryRecord {
        this.category = value
        return this
    }

    override fun value6(value: Boolean?): EntryRecord {
        this.saving = value
        return this
    }

    override fun value7(value: Int?): EntryRecord {
        this.sequence = value
        return this
    }

    override fun value8(value: Int?): EntryRecord {
        this.orderindex = value
        return this
    }

    override fun value9(value: Int?): EntryRecord {
        this.year = value
        return this
    }

    override fun value10(value: Int?): EntryRecord {
        this.month = value
        return this
    }

    override fun value11(value: Int?): EntryRecord {
        this.day = value
        return this
    }

    override fun values(value1: Long?, value2: BigDecimal?, value3: LocalDate?, value4: String?, value5: String?, value6: Boolean?, value7: Int?, value8: Int?, value9: Int?, value10: Int?, value11: Int?): EntryRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        return this
    }

    /**
     * Create a detached, initialised EntryRecord
     */
    constructor(id: Long? = null, amount: BigDecimal? = null, entrydate: LocalDate? = null, comment: String? = null, category: String? = null, saving: Boolean? = null, sequence: Int? = null, orderindex: Int? = null, year: Int? = null, month: Int? = null, day: Int? = null): this() {
        this.id = id
        this.amount = amount
        this.entrydate = entrydate
        this.comment = comment
        this.category = category
        this.saving = saving
        this.sequence = sequence
        this.orderindex = orderindex
        this.year = year
        this.month = month
        this.day = day
    }
}

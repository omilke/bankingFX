/*
 * This file is generated by jOOQ.
 */
package de.omilke.banking.persistence.jooq.meta.tables;


import de.omilke.banking.persistence.jooq.meta.Keys;
import de.omilke.banking.persistence.jooq.meta.Public;
import de.omilke.banking.persistence.jooq.meta.tables.records.EntryRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Entry extends TableImpl<EntryRecord> {

    private static final long serialVersionUID = -58946477;

    /**
     * The reference instance of <code>PUBLIC.ENTRY</code>
     */
    public static final Entry ENTRY = new Entry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntryRecord> getRecordType() {
        return EntryRecord.class;
    }

    /**
     * The column <code>PUBLIC.ENTRY.ID</code>.
     */
    public final TableField<EntryRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ENTRY.AMOUNT</code>.
     */
    public final TableField<EntryRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), org.jooq.impl.SQLDataType.DECIMAL(12, 2), this, "");

    /**
     * The column <code>PUBLIC.ENTRY.ENTRYDATE</code>.
     */
    public final TableField<EntryRecord, LocalDate> ENTRYDATE = createField(DSL.name("ENTRYDATE"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>PUBLIC.ENTRY.COMMENT</code>.
     */
    public final TableField<EntryRecord, String> COMMENT = createField(DSL.name("COMMENT"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>PUBLIC.ENTRY.CATEGORY</code>.
     */
    public final TableField<EntryRecord, String> CATEGORY = createField(DSL.name("CATEGORY"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>PUBLIC.ENTRY.SAVING</code>.
     */
    public final TableField<EntryRecord, Boolean> SAVING = createField(DSL.name("SAVING"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>PUBLIC.ENTRY.SEQUENCE</code>.
     */
    public final TableField<EntryRecord, Integer> SEQUENCE = createField(DSL.name("SEQUENCE"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.ENTRY.ORDERINDEX</code>.
     */
    public final TableField<EntryRecord, Integer> ORDERINDEX = createField(DSL.name("ORDERINDEX"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.ENTRY.YEAR</code>.
     */
    public final TableField<EntryRecord, Integer> YEAR = createField(DSL.name("YEAR"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.ENTRY.MONTH</code>.
     */
    public final TableField<EntryRecord, Integer> MONTH = createField(DSL.name("MONTH"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.ENTRY.DAY</code>.
     */
    public final TableField<EntryRecord, Integer> DAY = createField(DSL.name("DAY"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>PUBLIC.ENTRY</code> table reference
     */
    public Entry() {
        this(DSL.name("ENTRY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ENTRY</code> table reference
     */
    public Entry(String alias) {
        this(DSL.name(alias), ENTRY);
    }

    /**
     * Create an aliased <code>PUBLIC.ENTRY</code> table reference
     */
    public Entry(Name alias) {
        this(alias, ENTRY);
    }

    private Entry(Name alias, Table<EntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Entry(Name alias, Table<EntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Entry(Table<O> child, ForeignKey<O, EntryRecord> key) {
        super(child, key, ENTRY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<EntryRecord, Long> getIdentity() {
        return Keys.IDENTITY_ENTRY;
    }

    @Override
    public UniqueKey<EntryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public List<UniqueKey<EntryRecord>> getKeys() {
        return Arrays.<UniqueKey<EntryRecord>>asList(Keys.CONSTRAINT_3);
    }

    @Override
    public Entry as(String alias) {
        return new Entry(DSL.name(alias), this);
    }

    @Override
    public Entry as(Name alias) {
        return new Entry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Entry rename(String name) {
        return new Entry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Entry rename(Name name) {
        return new Entry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, BigDecimal, LocalDate, String, String, Boolean, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}

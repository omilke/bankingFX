/*
 * This file is generated by jOOQ.
 */
package de.omilke.banking.persistence.jooq.meta.tables;


import de.omilke.banking.persistence.jooq.meta.Keys;
import de.omilke.banking.persistence.jooq.meta.Public;
import de.omilke.banking.persistence.jooq.meta.tables.records.RecurringEntryRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class RecurringEntry extends TableImpl<RecurringEntryRecord> {

    private static final long serialVersionUID = 890851921;

    /**
     * The reference instance of <code>PUBLIC.RECURRING_ENTRY</code>
     */
    public static final RecurringEntry RECURRING_ENTRY = new RecurringEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecurringEntryRecord> getRecordType() {
        return RecurringEntryRecord.class;
    }

    /**
     * The column <code>PUBLIC.RECURRING_ENTRY.ID</code>.
     */
    public final TableField<RecurringEntryRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.RECURRING_ENTRY.AMOUNT</code>.
     */
    public final TableField<RecurringEntryRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), org.jooq.impl.SQLDataType.DECIMAL(12, 2), this, "");

    /**
     * The column <code>PUBLIC.RECURRING_ENTRY.STARTOFRECURRENCE</code>.
     */
    public final TableField<RecurringEntryRecord, LocalDate> STARTOFRECURRENCE = createField(DSL.name("STARTOFRECURRENCE"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>PUBLIC.RECURRING_ENTRY.LASTRECURRENCE</code>.
     */
    public final TableField<RecurringEntryRecord, LocalDate> LASTRECURRENCE = createField(DSL.name("LASTRECURRENCE"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>PUBLIC.RECURRING_ENTRY.COMMENT</code>.
     */
    public final TableField<RecurringEntryRecord, String> COMMENT = createField(DSL.name("COMMENT"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>PUBLIC.RECURRING_ENTRY.CATEGORY</code>.
     */
    public final TableField<RecurringEntryRecord, String> CATEGORY = createField(DSL.name("CATEGORY"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>PUBLIC.RECURRING_ENTRY.SAVING</code>.
     */
    public final TableField<RecurringEntryRecord, Boolean> SAVING = createField(DSL.name("SAVING"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>PUBLIC.RECURRING_ENTRY.SEQUENCE</code>.
     */
    public final TableField<RecurringEntryRecord, Integer> SEQUENCE = createField(DSL.name("SEQUENCE"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.RECURRING_ENTRY.ORDERINDEX</code>.
     */
    public final TableField<RecurringEntryRecord, Integer> ORDERINDEX = createField(DSL.name("ORDERINDEX"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.RECURRING_ENTRY.RECURRENCESTRATEGY</code>.
     */
    public final TableField<RecurringEntryRecord, String> RECURRENCESTRATEGY = createField(DSL.name("RECURRENCESTRATEGY"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * Create a <code>PUBLIC.RECURRING_ENTRY</code> table reference
     */
    public RecurringEntry() {
        this(DSL.name("RECURRING_ENTRY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.RECURRING_ENTRY</code> table reference
     */
    public RecurringEntry(String alias) {
        this(DSL.name(alias), RECURRING_ENTRY);
    }

    /**
     * Create an aliased <code>PUBLIC.RECURRING_ENTRY</code> table reference
     */
    public RecurringEntry(Name alias) {
        this(alias, RECURRING_ENTRY);
    }

    private RecurringEntry(Name alias, Table<RecurringEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecurringEntry(Name alias, Table<RecurringEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RecurringEntry(Table<O> child, ForeignKey<O, RecurringEntryRecord> key) {
        super(child, key, RECURRING_ENTRY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<RecurringEntryRecord, Long> getIdentity() {
        return Keys.IDENTITY_RECURRING_ENTRY;
    }

    @Override
    public UniqueKey<RecurringEntryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public List<UniqueKey<RecurringEntryRecord>> getKeys() {
        return Arrays.<UniqueKey<RecurringEntryRecord>>asList(Keys.CONSTRAINT_D);
    }

    @Override
    public RecurringEntry as(String alias) {
        return new RecurringEntry(DSL.name(alias), this);
    }

    @Override
    public RecurringEntry as(Name alias) {
        return new RecurringEntry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurringEntry rename(String name) {
        return new RecurringEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecurringEntry rename(Name name) {
        return new RecurringEntry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, BigDecimal, LocalDate, LocalDate, String, String, Boolean, Integer, Integer, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}

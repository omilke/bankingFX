/*
 * This file is generated by jOOQ.
 */
package de.omilke.banking.persistence.jooq.meta.tables


import de.omilke.banking.persistence.jooq.meta.Public
import de.omilke.banking.persistence.jooq.meta.indexes.IDX_ENTRY_DATE
import de.omilke.banking.persistence.jooq.meta.keys.CONSTRAINT_3
import de.omilke.banking.persistence.jooq.meta.tables.records.EntryRecord

import java.math.BigDecimal
import java.time.LocalDate

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row11
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Entry(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, EntryRecord>?,
    aliased: Table<EntryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<EntryRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>PUBLIC.ENTRY</code>
         */
        val ENTRY = Entry()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EntryRecord> = EntryRecord::class.java

    /**
     * The column <code>PUBLIC.ENTRY.ID</code>.
     */
    val ID: TableField<EntryRecord, Long?> = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>PUBLIC.ENTRY.AMOUNT</code>.
     */
    val AMOUNT: TableField<EntryRecord, BigDecimal?> = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(12, 2).nullable(false), this, "")

    /**
     * The column <code>PUBLIC.ENTRY.ENTRYDATE</code>.
     */
    val ENTRYDATE: TableField<EntryRecord, LocalDate?> = createField(DSL.name("ENTRYDATE"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>PUBLIC.ENTRY.COMMENT</code>.
     */
    val COMMENT: TableField<EntryRecord, String?> = createField(DSL.name("COMMENT"), SQLDataType.VARCHAR(2147483647).nullable(false), this, "")

    /**
     * The column <code>PUBLIC.ENTRY.CATEGORY</code>.
     */
    val CATEGORY: TableField<EntryRecord, String?> = createField(DSL.name("CATEGORY"), SQLDataType.VARCHAR(2147483647).nullable(false), this, "")

    /**
     * The column <code>PUBLIC.ENTRY.SAVING</code>.
     */
    val SAVING: TableField<EntryRecord, Boolean?> = createField(DSL.name("SAVING"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>PUBLIC.ENTRY.SEQUENCE</code>.
     */
    val SEQUENCE: TableField<EntryRecord, Int?> = createField(DSL.name("SEQUENCE"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>PUBLIC.ENTRY.ORDERINDEX</code>.
     */
    val ORDERINDEX: TableField<EntryRecord, Int?> = createField(DSL.name("ORDERINDEX"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>PUBLIC.ENTRY.YEAR</code>.
     */
    val YEAR: TableField<EntryRecord, Int?> = createField(DSL.name("YEAR"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>PUBLIC.ENTRY.MONTH</code>.
     */
    val MONTH: TableField<EntryRecord, Int?> = createField(DSL.name("MONTH"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>PUBLIC.ENTRY.DAY</code>.
     */
    val DAY: TableField<EntryRecord, Int?> = createField(DSL.name("DAY"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<EntryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<EntryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>PUBLIC.ENTRY</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>PUBLIC.ENTRY</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>PUBLIC.ENTRY</code> table reference
     */
    constructor(): this(DSL.name("ENTRY"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, EntryRecord>): this(Internal.createPathAlias(child, key), child, key, ENTRY, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_ENTRY_DATE)
    override fun getIdentity(): Identity<EntryRecord, Long?> = super.getIdentity() as Identity<EntryRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<EntryRecord> = CONSTRAINT_3
    override fun getKeys(): List<UniqueKey<EntryRecord>> = listOf(CONSTRAINT_3)
    override fun `as`(alias: String): Entry = Entry(DSL.name(alias), this)
    override fun `as`(alias: Name): Entry = Entry(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Entry = Entry(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Entry = Entry(name, null)

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row11<Long?, BigDecimal?, LocalDate?, String?, String?, Boolean?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row11<Long?, BigDecimal?, LocalDate?, String?, String?, Boolean?, Int?, Int?, Int?, Int?, Int?>
}

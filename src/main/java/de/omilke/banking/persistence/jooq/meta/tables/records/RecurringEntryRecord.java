/*
 * This file is generated by jOOQ.
 */
package de.omilke.banking.persistence.jooq.meta.tables.records;


import de.omilke.banking.persistence.jooq.meta.tables.RecurringEntry;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;

import java.math.BigDecimal;
import java.time.LocalDate;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class RecurringEntryRecord extends UpdatableRecordImpl<RecurringEntryRecord> implements Record10<Long, BigDecimal, LocalDate, LocalDate, String, String, Boolean, Integer, Integer, String> {

    private static final long serialVersionUID = 887843102;

    /**
     * Setter for <code>PUBLIC.RECURRING_ENTRY.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.RECURRING_ENTRY.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>PUBLIC.RECURRING_ENTRY.AMOUNT</code>.
     */
    public void setAmount(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.RECURRING_ENTRY.AMOUNT</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>PUBLIC.RECURRING_ENTRY.STARTOFRECURRENCE</code>.
     */
    public void setStartofrecurrence(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.RECURRING_ENTRY.STARTOFRECURRENCE</code>.
     */
    public LocalDate getStartofrecurrence() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for <code>PUBLIC.RECURRING_ENTRY.LASTRECURRENCE</code>.
     */
    public void setLastrecurrence(LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.RECURRING_ENTRY.LASTRECURRENCE</code>.
     */
    public LocalDate getLastrecurrence() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for <code>PUBLIC.RECURRING_ENTRY.COMMENT</code>.
     */
    public void setComment(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.RECURRING_ENTRY.COMMENT</code>.
     */
    public String getComment() {
        return (String) get(4);
    }

    /**
     * Setter for <code>PUBLIC.RECURRING_ENTRY.CATEGORY</code>.
     */
    public void setCategory(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>PUBLIC.RECURRING_ENTRY.CATEGORY</code>.
     */
    public String getCategory() {
        return (String) get(5);
    }

    /**
     * Setter for <code>PUBLIC.RECURRING_ENTRY.SAVING</code>.
     */
    public void setSaving(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>PUBLIC.RECURRING_ENTRY.SAVING</code>.
     */
    public Boolean getSaving() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>PUBLIC.RECURRING_ENTRY.SEQUENCE</code>.
     */
    public void setSequence(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>PUBLIC.RECURRING_ENTRY.SEQUENCE</code>.
     */
    public Integer getSequence() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>PUBLIC.RECURRING_ENTRY.ORDERINDEX</code>.
     */
    public void setOrderindex(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>PUBLIC.RECURRING_ENTRY.ORDERINDEX</code>.
     */
    public Integer getOrderindex() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>PUBLIC.RECURRING_ENTRY.RECURRENCESTRATEGY</code>.
     */
    public void setRecurrencestrategy(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>PUBLIC.RECURRING_ENTRY.RECURRENCESTRATEGY</code>.
     */
    public String getRecurrencestrategy() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, BigDecimal, LocalDate, LocalDate, String, String, Boolean, Integer, Integer, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, BigDecimal, LocalDate, LocalDate, String, String, Boolean, Integer, Integer, String> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return RecurringEntry.RECURRING_ENTRY.ID;
    }

    @Override
    public Field<BigDecimal> field2() {
        return RecurringEntry.RECURRING_ENTRY.AMOUNT;
    }

    @Override
    public Field<LocalDate> field3() {
        return RecurringEntry.RECURRING_ENTRY.STARTOFRECURRENCE;
    }

    @Override
    public Field<LocalDate> field4() {
        return RecurringEntry.RECURRING_ENTRY.LASTRECURRENCE;
    }

    @Override
    public Field<String> field5() {
        return RecurringEntry.RECURRING_ENTRY.COMMENT;
    }

    @Override
    public Field<String> field6() {
        return RecurringEntry.RECURRING_ENTRY.CATEGORY;
    }

    @Override
    public Field<Boolean> field7() {
        return RecurringEntry.RECURRING_ENTRY.SAVING;
    }

    @Override
    public Field<Integer> field8() {
        return RecurringEntry.RECURRING_ENTRY.SEQUENCE;
    }

    @Override
    public Field<Integer> field9() {
        return RecurringEntry.RECURRING_ENTRY.ORDERINDEX;
    }

    @Override
    public Field<String> field10() {
        return RecurringEntry.RECURRING_ENTRY.RECURRENCESTRATEGY;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public BigDecimal component2() {
        return getAmount();
    }

    @Override
    public LocalDate component3() {
        return getStartofrecurrence();
    }

    @Override
    public LocalDate component4() {
        return getLastrecurrence();
    }

    @Override
    public String component5() {
        return getComment();
    }

    @Override
    public String component6() {
        return getCategory();
    }

    @Override
    public Boolean component7() {
        return getSaving();
    }

    @Override
    public Integer component8() {
        return getSequence();
    }

    @Override
    public Integer component9() {
        return getOrderindex();
    }

    @Override
    public String component10() {
        return getRecurrencestrategy();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public BigDecimal value2() {
        return getAmount();
    }

    @Override
    public LocalDate value3() {
        return getStartofrecurrence();
    }

    @Override
    public LocalDate value4() {
        return getLastrecurrence();
    }

    @Override
    public String value5() {
        return getComment();
    }

    @Override
    public String value6() {
        return getCategory();
    }

    @Override
    public Boolean value7() {
        return getSaving();
    }

    @Override
    public Integer value8() {
        return getSequence();
    }

    @Override
    public Integer value9() {
        return getOrderindex();
    }

    @Override
    public String value10() {
        return getRecurrencestrategy();
    }

    @Override
    public RecurringEntryRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public RecurringEntryRecord value2(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public RecurringEntryRecord value3(LocalDate value) {
        setStartofrecurrence(value);
        return this;
    }

    @Override
    public RecurringEntryRecord value4(LocalDate value) {
        setLastrecurrence(value);
        return this;
    }

    @Override
    public RecurringEntryRecord value5(String value) {
        setComment(value);
        return this;
    }

    @Override
    public RecurringEntryRecord value6(String value) {
        setCategory(value);
        return this;
    }

    @Override
    public RecurringEntryRecord value7(Boolean value) {
        setSaving(value);
        return this;
    }

    @Override
    public RecurringEntryRecord value8(Integer value) {
        setSequence(value);
        return this;
    }

    @Override
    public RecurringEntryRecord value9(Integer value) {
        setOrderindex(value);
        return this;
    }

    @Override
    public RecurringEntryRecord value10(String value) {
        setRecurrencestrategy(value);
        return this;
    }

    @Override
    public RecurringEntryRecord values(Long value1, BigDecimal value2, LocalDate value3, LocalDate value4, String value5, String value6, Boolean value7, Integer value8, Integer value9, String value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RecurringEntryRecord
     */
    public RecurringEntryRecord() {
        super(RecurringEntry.RECURRING_ENTRY);
    }

    /**
     * Create a detached, initialised RecurringEntryRecord
     */
    public RecurringEntryRecord(Long id, BigDecimal amount, LocalDate startofrecurrence, LocalDate lastrecurrence, String comment, String category, Boolean saving, Integer sequence, Integer orderindex, String recurrencestrategy) {
        super(RecurringEntry.RECURRING_ENTRY);

        set(0, id);
        set(1, amount);
        set(2, startofrecurrence);
        set(3, lastrecurrence);
        set(4, comment);
        set(5, category);
        set(6, saving);
        set(7, sequence);
        set(8, orderindex);
        set(9, recurrencestrategy);
    }
}
